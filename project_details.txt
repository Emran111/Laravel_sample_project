Please read the assignment carefully, every detail is important. We will not only check if it's functional, but also look carefully into the design and the way you structure the code.

1) Register
The visitor can register himself here, by leaving the following information:
- UserName
- Password (at least 6 characters)
- First name & surname
- Address
- City
- Country (select from a dropdown)
- Email 
- Phone number 
- Possibility to upload an image, preferably asynchronous upload

After clicking on submit
- The system has to check if the username doesn't exist. If it does the visitor needs to get a warning and had to choose another username.
- All data must be stored in a database.
- A verification e-mail is sent to the email address provided, prompting the user to activate his account.
- Shows a confirmation page and after 10 seconds redirect to the landing page.

2) Login
On the website is a login page. Users can login with their Username and Password, submitted during registration.

3) Detail page
The personal details have to be presented in a account detail page, that can be reached after login with the created Username and Password.

4) Detail page - Edit mode
Allow the logged-in user to update his details. The validations enforced during Registration must be present. Edit mode can be provided as a 'switched' view from the normal display-only detail page.

5) Forgot Password
A mechanism which will allow a user to reset his password to a random generated one in the event that he has forgotten his.

6) Administrator View
A page which will allow pre-registered admin accounts to login and view a list of registered users and their relevant details. This area can use a minimalist layout that is different to the design. Admins must be able to activate/deactivate user accounts from here.

General comments:
- This is not a test of your design skills, though good use of CSS and Javascript will be beneficial.
- Feel free to use a framework of your choice, but please do not use a CMS or plugins that provide the functionality asked for. You need to write the functionality yourself.
- Program the site using OOP and use a design pattern, at least MVC.
- Choose a coding standard and stick to it.
- Provide clear instructions as how to install the site, we will be assessing that it works.
- Include a DB schema with some dummy data.
- Any additional code, tests, etc. is welcome but not necessary.
